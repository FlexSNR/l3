//
//Copyright [2016] [SnapRoute Inc]
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
//       Unless required by applicable law or agreed to in writing, software
//       distributed under the License is distributed on an "AS IS" BASIS,
//       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//       See the License for the specific language governing permissions and
//       limitations under the License.
//
// _______  __       __________   ___      _______.____    __    ____  __  .___________.  ______  __    __
// |   ____||  |     |   ____\  \ /  /     /       |\   \  /  \  /   / |  | |           | /      ||  |  |  |
// |  |__   |  |     |  |__   \  V  /     |   (----` \   \/    \/   /  |  | `---|  |----`|  ,----'|  |__|  |
// |   __|  |  |     |   __|   >   <       \   \      \            /   |  |     |  |     |  |     |   __   |
// |  |     |  `----.|  |____ /  .  \  .----)   |      \    /\    /    |  |     |  |     |  `----.|  |  |  |
// |__|     |_______||_______/__/ \__\ |_______/        \__/  \__/     |__|     |__|      \______||__|  |__|
//

package config

import (
	"github.com/google/gopacket/layers"
)

const (
	STATE_UP      = "UP"
	STATE_DOWN    = "DOWN"
	CONFIG_CREATE = "CREATE"
	CONFIG_DELETE = "DELETE"
	CONFIG_UPDATE = "UPDATE"

	L2_NOTIFICATION    = "UNKNOWN_IP"
	L2_TAG_TYPE        = "tag"
	L2_UNTAG_TYPE      = "untag"
	L3_INVALID_IFINDEX = -1

	INTERNAL_VLAN = -1
)

const (
	_ = iota
	DELETE_BY_IFNAME
	DELETE_BY_IPADDR
	REFRESH_BY_IFNAME
	REFRESH_BY_IPADDR
)

type PortInfo struct {
	IntfRef     string
	IfIndex     int32
	Name        string
	OperState   string
	MacAddr     string
	Description string
}

type PortState struct {
	IfIndex int32
	IfState string
}

type IPv6IntfInfo struct {
	IntfRef     string
	IfIndex     int32
	IpAddr      string
	MsgType     string
	OperState   string
	LinkLocalIp string
}

type IPIntfNotification struct {
	IfIndex   int32
	IntfRef   string
	IpAddr    string
	Operation string
}

type GlobalState struct {
	Vrf                         string
	RetransmitInterval          int32
	ReachableTime               int32
	RouterAdvertisementInterval int32
	Neighbors                   int32
	TotalTxPackets              int64
	TotalRxPackets              int64
}

type NeighborConfig struct {
	MacAddr string
	VlanId  int32
	IfIndex int32
	Intf    string
	IpAddr  string
}

type NeighborEntry struct {
	IpAddr          string
	MacAddr         string
	ExpiryTimeLeft  string
	SendPackets     int64
	ReceivedPackets int64
	State           string
}

type InterfaceEntries struct {
	IntfRef         string
	IfIndex         int32
	LinkScopeIp     string
	GlobalScopeIp   string
	SendPackets     int64
	ReceivedPackets int64
	Neighbor        []NeighborEntry
}

type VlanInfo struct {
	VlanId        int32
	VlanIfIndex   int32          // vlan ifIndex generated by the system
	Name          string         // vlan name
	UntagPortsMap map[int32]bool // key is port ifIndex
	TagPortsMap   map[int32]bool
	OperState     string
}

type VlanNotification struct {
	VlanId      int32
	VlanIfIndex int32
	VlanName    string
	Operation   string
	UntagPorts  []int32
	TagPorts    []int32
}

type MacMoveNotification struct {
	IpAddr  string
	IfIndex int32
	VlanId  int32
}

type PacketData struct {
	SendPktType layers.ICMPv6TypeCode
	NeighborIp  string
	NeighborMac string
	IfIndex     int32
	FastProbe   bool
}

type ActionData struct {
	Type    int
	NbrIp   string
	IntfRef string
}
